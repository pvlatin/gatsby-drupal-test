"use strict";

const _require = require(`gatsby/graphql`),
      GraphQLObjectType = _require.GraphQLObjectType,
      GraphQLSchema = _require.GraphQLSchema;

const _require2 = require(`graphql-tools/dist/transforms/visitSchema`),
      visitSchema = _require2.visitSchema,
      VisitSchemaKind = _require2.VisitSchemaKind;

const _require3 = require(`graphql-tools/dist/stitching/schemaRecreation`),
      createResolveType = _require3.createResolveType,
      fieldMapToFieldConfigMap = _require3.fieldMapToFieldConfigMap;

class NamespaceUnderFieldTransform {
  constructor({
    typeName,
    fieldName,
    resolver
  }) {
    this.typeName = typeName;
    this.fieldName = fieldName;
    this.resolver = resolver;
  }

  transformSchema(schema) {
    const query = schema.getQueryType();
    let newQuery;
    const nestedType = new GraphQLObjectType({
      name: this.typeName,
      fields: () => fieldMapToFieldConfigMap(query.getFields(), createResolveType(typeName => {
        if (typeName === query.name) {
          return newQuery;
        } else {
          return schema.getType(typeName);
        }
      }), true)
    });
    newQuery = new GraphQLObjectType({
      name: query.name,
      fields: {
        [this.fieldName]: {
          type: nestedType,
          resolve: (parent, args, context, info) => {
            if (this.resolver) {
              return this.resolver(parent, args, context, info);
            } else {
              return {};
            }
          }
        }
      }
    });
    const typeMap = schema.getTypeMap();
    const allTypes = Object.keys(typeMap).filter(name => name !== query.name).map(key => typeMap[key]);
    return new GraphQLSchema({
      query: newQuery,
      types: allTypes
    });
  }

}

class StripNonQueryTransform {
  transformSchema(schema) {
    return visitSchema(schema, {
      [VisitSchemaKind.MUTATION]() {
        return null;
      },

      [VisitSchemaKind.SUBSCRIPTION]() {
        return null;
      }

    });
  }

}

module.exports = {
  NamespaceUnderFieldTransform,
  StripNonQueryTransform
};